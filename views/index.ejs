<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Mock Driver App</title>
</head>

<body>
    <h1>Mock Driver App</h1>
    <p>
        Driver states must be set in the order of a natural trip flow; The drive state can not be changed from ACCEPT to
        DROPOFF.

    </p>
    <p>
        In order to complete a trip, the states to call are (ACCEPT, ARRIVED, BEGIN_TRIP, DROPOFF).

        The driver can CANCEL after the ACCEPT or ARRIVED state.
    </p>
    <p>
        After 5 minutes of inactivity, the driver may automatically GO_OFFLINE and will have to be put back to the
        online state to accept
        trips.
    </p>
    <h2 class="runId">
        Current runId: <%= runId %>
    </h2>
    <h2 class="driverState">
        Current state: <%= state %>
    </h2>
    <h3 class="stateUpdatedAt">State updated at:
    </h3>

    <button class="accept" onclick="updateUberDriveState('accept')">ACCEPT</button>
    <br>

    <button class="arrived" onclick="updateUberDriveState('arrived')">ARRIVED</button>
    <span class="arrivedStatus"></span>
    <br>

    <button class="beginTrip" onclick="updateUberDriveState('beginTrip')">BEGIN_TRIP</button>
    <span class="beginTripStatus"></span>
    <br>

    <button class="dropoff" onclick="updateUberDriveState('dropoff')">DROPOFF</button>
    <span class="dropoffStatus"></span>
    <br>

    <button class="goOnline" onclick="updateUberDriveState('goOnline')">GO_ONLINE</button>
    <span class="goOnlineStatus"></span>
    <br>


    <button class="goOffline">GO_OFFLINE</button>
    <br><br>
    <form class="runIdForm">
        <label for="runId">Enter new run_id:</label>
        <input type="text" id="runId" name="runId" class="runIdIp"><br><br>
        <button class="saveBtn" type="submit" name="runId">Save</button>
    </form>

    <script>

        const driverState = document.querySelector(".driverState");
        const stateUpdatedAt = document.querySelector(".stateUpdatedAt");
        const runIdForm = document.querySelector(".runIdForm");

        runIdForm.addEventListener("submit", (e) => {
            const runIdIp = document.querySelector(".runIdIp");
            fetch('/set?' + new URLSearchParams({runId: runIdIp.value}))
            .then((resp)=>{console.log(`updated runId`);}).catch((e)=>{console.log(e)})
        })

        function updateUberDriveState(state) {
            console.log(state);
            fetch(
                '/update?' + new URLSearchParams({ state: state }),
            ).then((resp) => {
                resp.json().then((j) => {
                    console.log(j);
                    driverState.innerHTML = `Current state: ${j.state}`
                    stateUpdatedAt.innerHTML = `State updated at: ${new Date(j.updatedAt)}`
                }).catch(e => console.log(e))
            }).catch((c) => { console.log(c); })
        }
    </script>
</body>

</html>